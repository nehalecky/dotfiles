#!/bin/bash
# myTUI development workspace automation
# Usage: dev-workspace [project-name]

set -euo pipefail

# Get project name (default to current directory name)
PROJECT_NAME=${1:-$(basename "$PWD")}
PROJECT_DIR=${PROJECT_DIR:-$PWD}

# Special handling for HOME directory - provide guidance
if [[ "$PROJECT_DIR" == "$HOME" ]] && [[ -z "${1:-}" ]]; then
    echo "‚ö†Ô∏è  No project detected in HOME directory"
    echo ""
    echo "Options:"
    echo "  ‚Ä¢ workspace-home     - Launch Home Command Center (dotfiles)"
    echo "  ‚Ä¢ workspace-dev foo  - Create 'foo' project workspace here"
    echo "  ‚Ä¢ cd /path/to/project && workspace-dev"
    echo ""
    exit 0
fi

echo "üöÄ Launching development workspace for: $PROJECT_NAME"
echo "üìÅ Working directory: $PROJECT_DIR"

# Detect project type
PROJECT_TYPE="generic"
if [[ -f "$PROJECT_DIR/pyproject.toml" ]]; then
    PROJECT_TYPE="python"
    echo "üêç Python project detected (uv managed)"
elif [[ -f "$PROJECT_DIR/package.json" ]]; then
    PROJECT_TYPE="node"
    echo "üì¶ Node.js project detected"
elif [[ -f "$PROJECT_DIR/Cargo.toml" ]]; then
    PROJECT_TYPE="rust"
    echo "ü¶Ä Rust project detected"
elif [[ -f "$PROJECT_DIR/go.mod" ]]; then
    PROJECT_TYPE="go"
    echo "üêπ Go project detected"
fi

# Create new WezTerm window for the project (fullscreen via manual Cmd+Enter if desired)
WINDOW_ID=$(wezterm cli spawn --new-window --cwd "$PROJECT_DIR" -- zsh)

# Split for editor (right side, 60% width)  
EDITOR_PANE=$(wezterm cli split-pane --pane-id "$WINDOW_ID" --right --percent 60 -- hx .)

# Split bottom of left pane for git
GIT_PANE=$(wezterm cli split-pane --pane-id "$WINDOW_ID" --bottom --percent 50 -- lazygit)

# Split bottom of right pane based on project type
case "$PROJECT_TYPE" in
    python)
        # For Python projects, show dependency tree
        if command -v uv >/dev/null; then
            MONITOR_PANE=$(wezterm cli split-pane --pane-id "$EDITOR_PANE" --bottom --percent 30 -- zsh -c "uv tree; exec zsh")
        else
            MONITOR_PANE=$(wezterm cli split-pane --pane-id "$EDITOR_PANE" --bottom --percent 30 -- btop)
        fi
        ;;
    node)
        # For Node projects, could show npm list
        MONITOR_PANE=$(wezterm cli split-pane --pane-id "$EDITOR_PANE" --bottom --percent 30 -- btop)
        ;;
    *)
        # Default to system monitor
        MONITOR_PANE=$(wezterm cli split-pane --pane-id "$EDITOR_PANE" --bottom --percent 30 -- btop)
        ;;
esac

# Set window title
wezterm cli set-tab-title --pane-id "$WINDOW_ID" "Dev: $PROJECT_NAME"

# Project-specific hints based on type
case "$PROJECT_TYPE" in
    python)
        echo "üí° Python hints:"
        echo "   - Virtual environment will auto-activate with direnv"
        echo "   - Use 'uv run <command>' to run in virtual environment"
        echo "   - Use 'uv add <package>' to add dependencies"
        if [[ -f "$PROJECT_DIR/manage.py" ]]; then
            echo "   - Django detected: 'uv run python manage.py runserver'"
        elif [[ -f "$PROJECT_DIR/main.py" ]] && grep -q "FastAPI" "$PROJECT_DIR/main.py" 2>/dev/null; then
            echo "   - FastAPI detected: 'uv run uvicorn main:app --reload'"
        fi
        ;;
    node)
        echo "üí° Node.js hints:"
        echo "   - Run 'npm install' to install dependencies"
        echo "   - Run 'npm run dev' to start development server"
        ;;
    rust)
        echo "üí° Rust hints:"
        echo "   - Run 'cargo build' to build project"
        echo "   - Run 'cargo watch -x run' for auto-rebuild"
        ;;
    go)
        echo "üí° Go hints:"
        echo "   - Run 'go mod download' to fetch dependencies"
        echo "   - Run 'go run .' to run the project"
        ;;
esac

# Docker compose hint if exists
if [[ -f "$PROJECT_DIR/docker-compose.yml" ]]; then
    echo "üê≥ Docker Compose detected - consider running 'docker-compose up'"
fi

# Makefile hint if exists
if [[ -f "$PROJECT_DIR/Makefile" ]]; then
    echo "üî® Makefile detected - consider running 'make' or 'make help'"
fi

echo "‚úÖ Development workspace ready!"
echo "üí° Use Ctrl+a to access leader key shortcuts:"
echo "   f = File manager (yazi)    g = Git (lazygit)      k = Kubernetes (k9s)"
echo "   e = Editor (helix)         d = Docker (lazydocker) a = API client (atac)"
echo "   m = System monitor (btop)  n = Network (bandwhich) u = Disk usage (dust)"
echo "   h = Home workspace         W = New dev workspace"